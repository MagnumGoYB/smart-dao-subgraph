"""
DAO
"""
type DAO @entity {
  "ID (hash)"
  # Contract Address
  id: ID!
  "Creator"
  creator: Member
  "Executor"
  executor: Member
  "Name"
  name: String
  "Mission"
  mission: String
  "Description"
  description: String
  "Image URL"
  image: String
  "Extend Data"
  extend: Bytes
  "Member Info"
  memberInfo: MemberInfo
  "votePool"
  votePool: VotePool
  "Ledger Address"
  ledgerAddress: Bytes
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
  "Accounts"
  accounts: [Account!]!
}

"""
Member Info
"""
type MemberInfo @entity {
  "ID (hash)"
  # Contract Address
  id: ID!
  "Belong DAO"
  dao: DAO!
  "Members"
  members: [Member!] @derivedFrom(field: "infoBy")
  "Name"
  name: String
  "Member Count"
  count: BigInt!
}

"""
Member
"""
type Member @entity {
  "ID (hash)"
  # (DAO Address).concat('-').concat(tokenId)
  id: ID!
  "721 Token ID"
  tokenId: BigInt!
  "Account"
  account: Account!
  "Name"
  name: String
  "Description"
  description: String
  "Head Image URL"
  image: String
  "Vote Power"
  votes: BigInt
  "Info By"
  infoBy: MemberInfo!
}

"""
Account
"""
type Account @entity {
  "ID (hash)"
  # Wallet Address
  id: ID!
  "Belong DAOs"
  daos: [DAO!]! @derivedFrom(field: "accounts")
}

"""
Vote Pool
"""
type VotePool @entity {
  "ID (hash)"
  # Contract Address
  id: ID!
  "Belong DAO"
  dao: DAO!
  "Proposals"
  proposals: [Proposal!] @derivedFrom(field: "votePool")
  "Proposals Count"
  count: BigInt!
}

"""
Vote Proposal
"""
type Proposal @entity {
  "ID (hash)"
  id: ID!
  "Belong Vote Pool"
  votePool: VotePool!
  "is Anonymous"
  isAnonymous: Boolean!
  "Origin Member"
  # Is Anonymous, is Null
  origin: Member
  "Origin Address"
  originAddress: Bytes!
  "Name"
  name: String
  "Description"
  description: String
  "Lifespan"
  lifespan: BigInt
  "Expiry"
  expiry: BigInt
  "Target Address[]"
  target: [Bytes!]
  "Data Bytes[]"
  data: [Bytes!]
  "Pass Rate"
  passRate: BigInt
  "Loop Count"
  loopCount: BigInt
  "Loop Time"
  loopTime: BigInt
  "Vote Total"
  voteTotal: BigInt
  "Agree Total"
  agreeTotal: BigInt
  "Execute Time"
  executeTime: BigInt
  "Is Agree"
  isAgree: Boolean
  "Is Close"
  isClose: Boolean
  "Is Executed"
  isExecuted: Boolean
  "Time"
  time: BigInt
  "Modify Time"
  modifyTime: BigInt
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
}

enum LedgerType {
  Reserved
  Receive
  Deposit
  Withdraw
  Release
  AssetIncome
}

enum State {
  Enable
  Disable
}

"""
Ledger
"""
type Ledger @entity {
  "ID (hash)"
  # address.concat('-').concat(txHash)
  id: ID!
  "Address"
  address: Bytes!
  "Tx Hash"
  txHash: Bytes!
  "DAO Host"
  dao: DAO!
  "Type"
  type: LedgerType
  "Name"
  name: String
  "Description"
  description: String
  "Target Address"
  target: Bytes
  "Amount"
  balance: BigInt
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
  "Member ID"
  member: BigInt
  "Enable State"
  state: State!
  # assetIncome_id: number;
  # assetIncome?: LedgerAssetIncome;
}
