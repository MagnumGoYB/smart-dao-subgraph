"""
Statistic
"""
type Statistic @entity {
  "ID (hash)"
  id: ID!
  "Total DAOs"
  totalDAOs: BigInt!
  "Total Members"
  totalMembers: BigInt!
  "Total Accounts"
  totalAccounts: BigInt!
  "Total Proposals"
  totalProposals: BigInt!
  "Total Assets"
  totalAssets: BigInt!
  "Total Destroyed Assets"
  totalDestroyedAssets: BigInt!
  "Total Asset Amount"
  totalAssetsAmount: BigInt!
  "Total Destroyed Assets Amount"
  totalDestroyedAssetsAmount: BigInt!
  "Total Asset Minimum Price"
  totalAssetsMinimumPrice: BigInt!
}

"""
DAO
"""
type DAO @entity {
  "ID (hash) - Contract Address"
  id: ID!
  "Creator"
  creator: Member
  "Executor"
  executor: Member
  "Name"
  name: String
  "Mission"
  mission: String
  "Description"
  description: String
  "Image URL"
  image: String
  "Extend Data"
  extend: Bytes
  "Member Pool"
  memberPool: MemberPool
  "vote Pool"
  votePool: VotePool
  "Ledger Pool"
  ledgerPool: LedgerPool
  "Asset Pool"
  assetPool: [AssetPool!]
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
  "Accounts"
  accounts: [Account!]!
  "members"
  members: [Member!] @derivedFrom(field: "host")
  "Assets"
  assets: [Asset!] @derivedFrom(field: "host")
  "Proposals"
  proposals: [Proposal!] @derivedFrom(field: "host")
}

"""
Member Pool
"""
type MemberPool @entity {
  "ID (hash) - Contract Address"
  id: ID!
  "Belong DAO"
  host: DAO!
  "Members"
  members: [Member!] @derivedFrom(field: "memberPool")
  "Name"
  name: String
  "Member Count"
  count: BigInt!
}

"""
Member
"""
type Member @entity {
  "ID (hash) - (DAO Address).concat('-').concat(tokenId)"
  id: ID!
  "Belong DAO"
  host: DAO!
  "721 Token Address"
  token: Bytes!
  "721 Token ID"
  tokenId: BigInt!
  "Owner"
  owner: Account!
  "Name"
  name: String
  "Description"
  description: String
  "Head Image URL"
  image: String
  "Vote Power"
  votes: BigInt
  "Member Pool"
  memberPool: MemberPool!
}

"""
Account
"""
type Account @entity {
  "ID (hash) - Wallet Address"
  id: ID!
  "Belong DAOs"
  hosts: [DAO!]! @derivedFrom(field: "accounts")
}

"""
Vote Pool
"""
type VotePool @entity {
  "ID (hash) - Contract Address"
  id: ID!
  "Belong DAO"
  host: DAO!
  "Proposals"
  proposals: [Proposal!] @derivedFrom(field: "votePool")
  "Proposals Count"
  count: BigInt!
}

"""
Vote Proposal
"""
type Proposal @entity {
  "ID (hash)"
  id: ID!
  "Belong DAO"
  host: DAO!
  "Belong Vote Pool"
  votePool: VotePool!
  "is Anonymous"
  isAnonymous: Boolean!
  "Origin Member - Is Anonymous, is Null"
  origin: Member
  "Origin Address"
  originAddress: Bytes!
  "Name"
  name: String
  "Description"
  description: String
  "Lifespan"
  lifespan: BigInt
  "Expiry"
  expiry: BigInt
  "Target Address[]"
  target: [Bytes!]
  "Data Bytes[]"
  data: [Bytes!]
  "Pass Rate"
  passRate: BigInt
  "Loop Count"
  loopCount: BigInt
  "Loop Time"
  loopTime: BigInt
  "Vote Total"
  voteTotal: BigInt
  "Agree Total"
  agreeTotal: BigInt
  "Execute Time"
  executeTime: BigInt
  "Is Agree"
  isAgree: Boolean
  "Is Close"
  isClose: Boolean
  "Is Executed"
  isExecuted: Boolean
  "Time"
  time: BigInt
  "Modify Time"
  modifyTime: BigInt
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
}

"""
Ledger Pool
"""
type LedgerPool @entity {
  "ID (hash) - Contract Address"
  id: ID!
  "Belong DAO"
  host: DAO!
  "Ledgers"
  ledgers: [Ledger!] @derivedFrom(field: "ledgerPool")
  "Ledgers Count"
  count: BigInt!
}

enum LedgerType {
  Reserved
  Receive
  Deposit
  Withdraw
  Release
  AssetIncome
}

enum State {
  Enable
  Disable
}

"""
Ledger
"""
type Ledger @entity {
  "ID (hash) - address.concat('-').concat(txHash)"
  id: ID!
  "Address"
  address: Bytes!
  "Belong Ledger Pool"
  ledgerPool: LedgerPool!
  "Tx Hash"
  txHash: Bytes!
  "DAO Host"
  host: DAO!
  "Type"
  type: LedgerType
  "Name"
  name: String
  "Description"
  description: String
  "Target Address"
  target: Bytes
  "Amount"
  balance: BigInt
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
  "Member ID"
  member: BigInt
  "Enable State"
  state: State!
  # assetIncome_id: number;
  # assetIncome?: LedgerAssetIncome;
}

enum AssetPoolType {
  Frist
  Second
}

"""
Asset Pool
"""
type AssetPool @entity {
  "ID (hash) - Contract Address"
  id: ID!
  "Belong DAO"
  host: DAO!
  "Assets"
  assets: [Asset!] @derivedFrom(field: "assetPool")
  "Assets Total"
  total: BigInt!
  "Assets Total Supply"
  totalSupply: BigInt!
  "Asset Total Amount"
  amountTotal: BigInt!
  "Asset Minimum Price Total"
  minimumPriceTotal: BigInt!
  "Type"
  type: AssetPoolType!
}

enum AssetType {
  Invalid
  ERC1155_Single
  ERC1155
  ERC20
  ERC721
}

enum Selling {
  UnsellOrUnknown
  Order
  Opensea
}

"""
Asset
"""
type Asset @entity {
  "ID (hash) - (DAO Address).concat('-').concat(tokenId)"
  id: ID!
  "DAO Host"
  host: DAO!
  "ERC-1155 Token Address"
  token: Bytes!
  "ERC-1155 Token ID"
  tokenId: BigInt!
  "Token URI"
  uri: String
  "Total Supply"
  totalSupply: BigInt!
  "Asset Type"
  assetType: AssetType!
  "Belong Asset Pool"
  assetPool: AssetPool!
  "Author"
  author: Account!
  "Owner"
  owner: Account
  "State"
  state: State!
  "Selling State"
  selling: Selling!
  "Sell Price"
  sellPrice: BigInt!
  "Minimum Price"
  minimumPrice: BigInt!
  "Name"
  name: String
  "Description"
  description: String
  "Origin Image Link"
  imageOriign: String
  "Origin media Link"
  mediaOrigin: String
  "External Link"
  externalLink: String
  "Background Color"
  backgroundColor: String
  "Categorie"
  categorie: Int
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
}
