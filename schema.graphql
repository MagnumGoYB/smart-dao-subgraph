"""
Statistic
"""
type Statistic @entity {
  "ID (hash)"
  id: ID!
  "Total DAOs"
  totalDAOs: BigInt!
  "Total Members"
  totalMembers: BigInt!
  "Total Accounts"
  totalAccounts: BigInt!
  "Total Proposals"
  totalProposals: BigInt!
  "Total Agreed Proposals"
  totalAgreedProposals: BigInt!
  "Total Closed Proposals"
  totalClosedProposals: BigInt!
  "Total Executed Proposals"
  totalExecutedProposals: BigInt!
  "Total Votes"
  totalVotes: BigInt!
  "Total Assets"
  totalAssets: BigInt!
  "Total Destroyed Assets"
  totalDestroyedAssets: BigInt!
  "Total Asset Amount"
  totalAssetsAmount: BigInt!
  "Total Destroyed Assets Amount"
  totalDestroyedAssetsAmount: BigInt!
  "Total Asset Minimum Price"
  totalAssetsMinimumPrice: BigInt!
  "Total Asset Order"
  totalAssetsOrder: BigInt!
  "Total Asset Order Amount"
  totalAssetsOrderAmount: BigInt!
  "Total Ledger Asset Income"
  totalLedgerAssetIncome: BigInt!
  "Total Ledger Asset Income Amount"
  totalLedgerAssetIncomeAmount: BigInt!
}

"""
DAO
"""
type DAO @entity {
  "ID (hash) - Contract Address"
  id: ID!
  "Creator"
  creator: Member
  "Executor"
  executor: String
  "Name"
  name: String
  "Mission"
  mission: String
  "Description"
  description: String
  "Image URL"
  image: String
  "Extend Data"
  extend: Bytes
  "Member Contract Address"
  member: String
  "Member Pool"
  memberPool: MemberPool
  "Vote Contract Address"
  vote: String
  "vote Pool"
  votePool: VotePool
  "Ledger Contract Address"
  ledger: String
  "Ledger Pool"
  ledgerPool: LedgerPool
  "Asset Contract Address"
  asset: String
  "Asset Pool"
  assetPool: [AssetPool!]
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
  "Accounts"
  accounts: [Account!]!
  "members"
  members: [Member!] @derivedFrom(field: "host")
  "Assets"
  assets: [Asset!] @derivedFrom(field: "host")
  "Proposals"
  proposals: [Proposal!] @derivedFrom(field: "host")
}

"""
Member Pool
"""
type MemberPool @entity {
  "ID (hash) - Contract Address"
  id: ID!
  "Belong DAO"
  host: DAO!
  "Members"
  members: [Member!] @derivedFrom(field: "memberPool")
  "Name"
  name: String
  "Member Count"
  count: BigInt!
}

"""
Member
"""
type Member @entity {
  "ID (hash) - (DAO Address).concat('-').concat(tokenId)"
  id: ID!
  "Belong DAO"
  host: DAO!
  "721 Token Address"
  token: Bytes!
  "721 Token ID"
  tokenId: BigInt!
  "Owner"
  owner: Account!
  "Name"
  name: String
  "Description"
  description: String
  "Head Image URL"
  image: String
  "Vote Power"
  votes: BigInt
  "Member Pool"
  memberPool: MemberPool!
}

"""
Account
"""
type Account @entity {
  "ID (hash) - Wallet Address"
  id: ID!
  "Belong DAOs"
  hosts: [DAO!]! @derivedFrom(field: "accounts")
}

"""
Vote Pool
"""
type VotePool @entity {
  "ID (hash) - Contract Address"
  id: ID!
  "Belong DAO"
  host: DAO!
  "Life Span"
  lifespan: BigInt!
  "Proposals"
  proposals: [Proposal!] @derivedFrom(field: "votePool")
  "Proposals Total"
  proposalTotal: BigInt!
  "Proposals Agreed Total"
  proposalAgreedTotal: BigInt!
  "Proposals Closed Total"
  proposalClosedTotal: BigInt!
  "Proposals Executed Total"
  proposalExecutedTotal: BigInt!
  "Voted Total"
  votedTotal: BigInt!
}

"""
Vote Proposal
"""
type Proposal @entity {
  "ID (hash) - DAOAddress.concat('-').concat(id)"
  id: ID!
  "Proposal Number"
  number: Int!
  "Belong DAO"
  host: DAO!
  "Belong Vote Pool"
  votePool: VotePool!
  "is Anonymous"
  isAnonymous: Boolean!
  "Origin Member - Is Anonymous, is Null"
  origin: Member
  "Origin Address"
  originAddress: Bytes!
  "Name"
  name: String
  "Description"
  description: String
  "Lifespan"
  lifespan: BigInt
  "Expiry"
  expiry: BigInt
  "Target Address[]"
  target: [Bytes!]
  "Data Bytes[]"
  data: [Bytes!]
  "Pass Rate"
  passRate: BigInt
  "Loop Count"
  loopCount: BigInt
  "Loop Time"
  loopTime: BigInt
  "Vote Total"
  voteTotal: BigInt
  "Agree Total"
  agreeTotal: BigInt
  "Execute Time"
  executeTime: BigInt
  "Is Agree"
  isAgree: Boolean
  "Is Close"
  isClose: Boolean
  "Is Executed"
  isExecuted: Boolean
  "Modify Time"
  modifyTime: BigInt
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
}

type Vote @entity {
  "ID (hash) - (Proposal ID).concat('-').concat(txHash)"
  id: ID!
  "Belong DAO"
  host: DAO!
  "Belong Vote Pool"
  votePool: VotePool!
  "Belong Proposal"
  proposal: Proposal!
  "Member"
  owner: Member!
  "Vote Power"
  votes: BigInt!
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
}

"""
Ledger Pool
"""
type LedgerPool @entity {
  "ID (hash) - Contract Address"
  id: ID!
  "Belong DAO"
  host: DAO!
  "Ledgers"
  ledgers: [Ledger!] @derivedFrom(field: "ledgerPool")
  "Ledgers Count"
  count: BigInt!
  "Asset Income Total"
  assetIncomeTotal: BigInt!
  "Asset Income Amount"
  assetIncomeAmount: BigInt!
}

enum LedgerType {
  Reserved
  Receive
  Deposit
  Withdraw
  Release
  AssetIncome
}

enum State {
  Enable
  Disable
}

"""
Ledger
"""
type Ledger @entity {
  "ID (hash) - address.concat('-').concat(txHash)"
  id: ID!
  "Address"
  address: Bytes!
  "Belong Ledger Pool"
  ledgerPool: LedgerPool!
  "Tx Hash"
  txHash: Bytes!
  "DAO Host"
  host: DAO!
  "Type"
  type: LedgerType
  "Name"
  name: String
  "Description"
  description: String
  "Target Address"
  target: Bytes
  "Ref Address"
  ref: Bytes
  "Amount"
  amount: BigInt
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
  "Member ID"
  member: BigInt
  "Enable State"
  state: State!
  "Asset Income"
  assetIncome: LedgerAssetIncome
  "ERC-20 Token Address"
  erc20: Bytes
  "ERC-20 Token Symbol"
  symbol: String
}

enum AssetPoolType {
  Frist
  Second
}

"""
Asset Pool
"""
type AssetPool @entity {
  "ID (hash) - Contract Address"
  id: ID!
  "Belong DAO"
  host: DAO!
  "Assets"
  assets: [Asset!] @derivedFrom(field: "assetPool")
  "Asset Orders"
  assetOrders: [AssetOrder!] @derivedFrom(field: "assetPool")
  "Assets Total"
  total: BigInt!
  "Assets Total Supply"
  totalSupply: BigInt!
  "Asset Total Amount"
  amountTotal: BigInt!
  "Asset Minimum Price Total"
  minimumPriceTotal: BigInt!
  "Asset Order Total"
  orderTotal: BigInt!
  "Asset Order Amount Total"
  orderAmountTotal: BigInt!
  "Type"
  type: AssetPoolType!
  "Tax"
  tax: BigInt
}

enum AssetType {
  Invalid
  ERC1155_Single
  ERC1155
  ERC20
  ERC721
}

enum Selling {
  UnsellOrUnknown
  Order
  Opensea
}

"""
Asset
"""
type Asset @entity {
  "ID (hash) - (Address).concat('-').concat(tokenId)"
  id: ID!
  "DAO Host"
  host: DAO!
  "ERC-1155 Token Address"
  token: Bytes!
  "ERC-1155 Token ID"
  tokenId: BigInt!
  "Token URI"
  uri: String
  "Total Supply"
  totalSupply: BigInt!
  "Asset Type"
  assetType: AssetType!
  "Belong Asset Pool"
  assetPool: AssetPool!
  "Author"
  author: Account!
  "Owner"
  owner: Account
  "State"
  state: State!
  "Destroyed State"
  destroyed: Boolean!
  "Selling State"
  selling: Selling!
  "Selling Time"
  sellingTime: BigInt
  "Sold Time"
  soldTime: BigInt
  "Sell Price"
  sellPrice: BigInt!
  "Minimum Price"
  minimumPrice: BigInt!
  "Name"
  name: String
  "Description"
  description: String
  "Origin Image Link"
  imageOriign: String
  "Origin media Link"
  mediaOrigin: String
  "External Link"
  externalLink: String
  "Background Color"
  backgroundColor: String
  "Categorie"
  categorie: Int
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
}

type AssetOrder @entity {
  "ID (hash) - (Asset ID).concat('-').concat(txHash)"
  id: ID!
  "DAO Host"
  host: DAO!
  "Belong Asset"
  asset: Asset!
  "Belong Asset Pool"
  assetPool: AssetPool!
  "Tx Hash"
  txHash: Bytes!
  "Tx Value"
  value: BigInt!
  "From Address"
  from: Bytes!
  "To Address"
  to: Bytes!
  "Log Index"
  logIndex: BigInt!
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
}

enum SaleType {
  kDefault
  kFirst
  kSecond
}

type LedgerAssetIncome @entity {
  "ID (hash) - (Asset ID).concat('-').concat(Ledger ID).concat('-').concat(txHash)"
  id: ID!
  "Belong Asset"
  asset: Asset!
  "Belong Ledger"
  ledger: Ledger!
  "Belong Ledger Pool"
  ledgerPool: LedgerPool!
  "Tx Hash"
  txHash: Bytes!
  "DAO Host"
  host: DAO!
  "Source Address"
  source: Bytes!
  "Amount"
  amount: BigInt!
  "Price"
  price: BigInt!
  "From Address"
  from: Bytes!
  "To Address"
  to: Bytes!
  "Sale Type"
  saleType: AssetPoolType!
  "ERC-20 Token Address"
  erc20: Bytes
  "ERC-20 Token Symbol"
  symbol: String
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
}

type AssetTxRecord @entity {
  "ID (hash) - (Asset Address).concat('-').concat(txHash)"
  id: ID!
  "ERC-1155 Token Address"
  token: Bytes!
  "ERC-1155 Token ID"
  tokenId: BigInt!
  "DAO Host"
  host: DAO!
  "Belong Asset"
  asset: Asset!
  "Belong Asset Pool"
  assetPool: AssetPool!
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Tx Hash"
  txHash: Bytes!
  "Tx Value"
  value: BigInt!
  "From Address"
  from: Bytes!
  "To Address"
  to: Bytes!
}

type LedgerBalance @entity {
  "ID (hash) - (Ledger ID).concat('-').concat(ERC-20 Token Address)"
  id: ID!
  "DAO Host"
  host: DAO!
  "Belong Ledger"
  ledger: Ledger!
  "ERC-20 Token Address"
  erc20: Bytes!
  "ERC-20 Token Symbol"
  symbol: String
  "ERC-20 Token Name"
  name: String
  "Balance"
  value: BigInt!
  "Income"
  income: BigInt
  "Expenditure"
  expenditure: BigInt
  "Items"
  items: BigInt!
  "Block Timestamp"
  time: BigInt!
}
