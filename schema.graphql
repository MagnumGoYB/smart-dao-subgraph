# DAOs Factory
type DAOsFactory @entity {
  "ID (hash)"
  id: ID!
  "Total of DAOs"
  total: BigInt!
}

"""
DAO
"""
type DAO @entity {
  "ID (hash)"
  id: ID!
  "Creator"
  creator: Account
  "Executor"
  executor: Account
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
  "Name"
  name: String
  "Mission"
  mission: String
  "Description"
  description: String
  "Image URL"
  image: String
  "Extend Data"
  extend: Bytes
  "Members"
  members: [Member!] @derivedFrom(field: "dao")
  "votePool"
  votePool: VotePool
  "Ledger Address"
  ledgerAddress: Bytes
}

"""
Account
"""
type Account @entity {
  "ID (hash)"
  # (DAO ID).concat('-').concat(address)
  id: ID!
  "Address"
  address: Bytes!
  "Name"
  name: String
  "Description"
  description: String
  "Head Image URL"
  image: String
  "Vote Power"
  votes: BigInt
  "Joined DAOs"
  daos: [Member!] @derivedFrom(field: "account")
}

"""
Many to many Member
"""
type Member @entity {
  "ID (hash)"
  # ERC-721 Token ID
  # address.concat('-').concat(ERC-721 Token ID)
  id: ID!
  "Address"
  address: Bytes!
  "Account"
  account: Account!
  "Joined DAO"
  dao: DAO!
}

"""
Vote Pool
"""
type VotePool @entity {
  "ID (hash)"
  # dao.concat('-').concat(address)
  id: ID!
  "Address"
  address: Bytes!
  "Belong DAO"
  dao: DAO!
  "Proposals"
  proposals: [Proposal!] @derivedFrom(field: "votePool")
}

"""
Vote Proposal
"""
type Proposal @entity {
  "ID (hash)"
  id: ID!
  "Belong Vote Pool"
  votePool: VotePool!
  "is Anonymous"
  isAnonymous: Boolean!
  "Origin Member"
  # Is Anonymous, is Null
  origin: Account
  "Origin Address"
  originAddress: Bytes!
  "Name"
  name: String
  "Description"
  description: String
  "Lifespan"
  lifespan: BigInt
  "Expiry"
  expiry: BigInt
  # id: number;//           int primary key auto_increment,
  # host: string;//         varchar (64)                 not null, -- dao host
  # address: string;//      varchar (64)                 not null, -- 投票池合约地址
  # proposal_id: string;//  varchar (72)                 not null, -- 提案id
  # name: string;//         varchar (64)                 not null, -- 提案名称
  # description: string;//  varchar (1024)               not null, -- 提案描述
  # origin: string;//       varchar (64)                 not null, -- 发起人 address
  # originId: string;//     varchar (72)                 not null, -- 发起人成员id (member id),如果为0表示匿名成员
  # target: string[];//     josn                             null, -- 执行目标合约地址
  # data: string[];//       text                             null, -- 执行参数数据
  # lifespan: number;//     bigint                       not null, -- 投票生命周期（minutes）
  # expiry: number;//       bigint                       not null, -- 过期时间（区块链时间单位）
  # passRate: number;//     int                          not null, -- 通过率不小于全体票数50% (0-10000)
  # loopCount: number;//    int              default (0) not null, -- 执行循环次数: -1无限循环,0不循环
  # loopTime: number;//     bigint           default (0) not null, -- 执行循环间隔时间
  # voteTotal: number;//    bigint           default (0) not null, -- 投票总数
  # agreeTotal: number;//   bigint           default (0) not null, -- 通过总数
  # executeTime: number;//  bigint           default (0) not null, -- 上次执行的时间
  # isAgree: boolean;//     bit              default (0) not null, -- 是否通过采用
  # isClose: boolean;//     bit              default (0) not null, -- 投票是否截止
  # isExecuted: boolean;//  bit              default (0) not null  -- 是否已执行完成
  # time: number;//         bigint                       not null,
  # modify: number;//       bigint                       not null,
  # blockNumber: number;//  int                          not null
}

enum LedgerType {
  Reserved
  Receive
  Deposit
  Withdraw
  Release
  AssetIncome
}

enum State {
  Enable
  Disable
}

type Ledger @entity {
  "ID (hash)"
  # address.concat('-').concat(txHash)
  id: ID!
  "Address"
  address: Bytes!
  "Tx Hash"
  txHash: Bytes!
  "DAO Host"
  dao: DAO!
  "Type"
  type: LedgerType
  "Name"
  name: String
  "Description"
  description: String
  "Target Address"
  target: Bytes
  "Amount"
  balance: BigInt
  "Block ID (hash)"
  blockId: ID!
  "Block Number"
  blockNumber: BigInt!
  "Block Timestamp"
  blockTimestamp: BigInt!
  "Member ID"
  member: BigInt
  "Enable State"
  state: State!
  # assetIncome_id: number;
  # assetIncome?: LedgerAssetIncome;
}
